#!/usr/bin/env node

'use strict'

const commander = require('commander');
const options = require("babel-core").options;
const each = require("lodash/each");
const kebabCase = require("lodash/kebabCase");

each(options, function (option, key) {
	if (option.hidden) return;

	var arg = kebabCase(key);

	if (option.type !== "boolean") {
		arg += " [" + (option.type || "string") + "]";
	}

	if (option.type === "boolean" && option.default === true) {
		arg = "no-" + arg;
	}

	arg = "--" + arg;

	if (option.shorthand) {
		arg = "-" + option.shorthand + ", " + arg;
	}

	var desc = [];
	if (option.deprecated) desc.push("[DEPRECATED] " + option.deprecated);
	if (option.description) desc.push(option.description);

	commander.option(arg, desc.join(" "));
});

commander.option("-x, --extensions [extensions]", "List of extensions to compile when a directory has been input [.es6,.js,.es,.jsx]")
	.option("");
commander.option("-w, --watch", "Recompile files on changes");
commander.option("--skip-initial-build", "Do not compile files before watching");
commander.option("-o, --out-file [out]", "Compile all input files into a single file");
commander.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");
commander.option("-D, --copy-files", "When compiling a directory copy over non-compilable files");
commander.option("-q, --quiet", "Don't log anything");

commander
	.option('--target [target]', 'build target level')

	.option('-c, --config [file]', 'Custom bafill config file')

	.option('--debug', 'open debug log')

	.version(require('../package.json').version)
	.usage("[options] <files ...>")
	.parse(process.argv);

commander.type = 'node';

if (process.argv.length == 2) {
	commander.outputHelp();
	process.exit(1);
} else {
	const Bafile = require('../lib/Bafill').default;
	new Bafile().build();
}